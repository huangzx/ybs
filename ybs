#!/bin/bash
#
# ybs -- Ylmf OS Build System
# 
# Maintainer: Ylmf OS Developers <ylmfos@115.com>
#

#
[ -f /etc/ybs.conf ] && . /etc/ybs.conf
[ -f /tools/usr/lib/ybs/funcs ] && . /tools/usr/lib/ybs/funcs
[ -f /usr/lib/ybs/funcs ] && . /usr/lib/ybs/funcs
#trap clean_up INT

# creat paths
mkdir -p $YPPATH_LIB $YPPATH_SOURCE $YPPATH_PACKAGE $YPPATH_DB $YPPATH_FIELD
chmod 777 $YPPATH_FIELD $YPPATH_SOURCE  2>/dev/null

# reload parameters if available
if [ -z "$ARCH" ]; then
  case "$(uname -m)" in
    i?86) export ARCH=i686 ;;
    arm*) export ARCH=arm ;;
       *) export ARCH=$(uname -m) ;;
  esac
fi

LIBDIRSUFFIX=""
case "$ARCH" in
 "i686")
	CFLAGS="-O2 -march=i686 -mtune=i686 -pipe "
	BUILD="-m32"	;;
 "s390")
	CFLAGS="-O2 "	;;
 "x86_64")
	CFLAGS="-O2 -fPIC "
	BUILD="-m64"	;;
 *)
	CFLAGS="-O2 "	
esac
CXXFLAGS="$CFLAGS "
YARCH="$ARCH"

export ARCH 
export YARCH
export CC="$CC $BUILD"
export CXX="$CXX $BUILD"
export CFLAGS
export CXXFLAGS
export MAKEOPTS
export YPINST_PREFIX
export YP_I18N
export ACCEPT_REPO
export BUILD

# Support set YPKG_ROOT 
#
if [ "x$YPKG_ROOT" = "x" ];then
   YPKG_ROOT="/"
else
   mkdir -p "$YPKG_ROOT"
   YPKG_ROOT=$(readlink -f "$YPKG_ROOT")
fi
#

#
ypkg_show_usage() {
	cat <<EOF
$0  

Usage: $0 command [options] pkg1 [pkg2 ...]

ybs (ylmfos build system) is a simple command line for download/compile/install package from source code

Commands:
       -h|--help                               Show usage   
       -s|--search                             Search pkg
       -d|--download                           Download source tartall of pkg
       -r|--remove                             Remove pkg
       -i|--install                            Compile and install pkg and dependence
      -is|--install-single                     Forced install single pkg without checking dependence
       -n|--notes                              Show user notes of pkg
       -c|--comments                           Show user comments of pkg
       -k|--depend                             Show dependence of pkg
       -w|--showpbs                            Show avaliable pbsfile of pkg
      -wr|--whatrequires                       Show which pkgs depends on this pkg
       --sync [path]                           Sync pbslib via git to $YPPATH/pbslib
       --info                                  Show $0 parameters of /etc/ybs.conf

Options for install:
	-p|--pretend                           Instead of actually install, simply display what to do  
	-F|--force                             Force install
	--fetch                                Break after download source tarball
	--unpack   			       Break after unpack source tarball
	--patch   			       Break after patch source
  	--config         		       Break after configure	
	--build                                Break after make a.k.s compile
	--check				       Break after make check/test
	--mkinstall                            Break after make install    
	--package                              Break after make ypk package    

Base is at $YPPATH
EOF
}

#
i=0
j=0
for ((h=1;h<=$#;h++));do
	arg=$(echo $(eval "echo \$${h}"))
	# remove blank in string	
	arg=$(echo $arg |tr -d '[:blank:]')
	case $arg in
		-*) argvs[${j}]="$arg"
		    let j++	;;
		*)  args[${i}]="$arg"
		    let i++
	esac
done

#echo "packages: ${args[@]}"
#echo "parameter: ${argvs[@]}"

for i in ${argvs[@]}; do
	case ${i} in
		-p|-pv|--pretend) PRETEND="yes"       ;;
		-F|--force) 	  FORCE_INSTALL="yes" ;;
		--fetch)          BREAK="fetch"       ;;
		--unpack)	  BREAK="unpack"      ;;	
		--patch)	  BREAK="patch"       ;;	
		--config)	  BREAK="config"      ;;
		--build)          BREAK="build"       ;;
		--check)          BREAK="check"       ;;
		--mkinstall)      BREAK="mkinstall"   ;;
		--package)        BREAK="package"     
	esac
done

#
case "${1}" in
-info|--info)
	# show build info
	grep -v ^# "/etc/ybs.conf"
	;;

-s|--search)
	# search package.
	msg_ "* Searching for "
	wmsg_ "${args[@]} "
	msg "..."
	for i in ${args[@]}; do
		ypkg_search $i
	done
	;;

-d|--download)
	# download source
	check_root
	msg_ "* Source downloading "
	wmsg_ "${args[@]} "
	msg "..."
	for i in ${args[@]}; do
		ypkg_download $i
	done
	;;

-i|--install)
	# install packages and depends
	check_root
	ymsg "* Calculating dependencies..."

	for i in ${args[@]};do
		app=${i}
		pbsfile=$(ypkg_show "$app" pbs)
		[ -f "$pbsfile" ] && . "$pbsfile" || (echo; rmsg "* [Error]: ${app} not found."; exit 1)
		
		deps=
		for dep in $BDEPEND; do
			dep=${dep/-dev/} 
			deps+="${dep} "
		done

		deps="$RDEPEND $deps"

  		#for dep in $(echo $deps |tr ' ' '\n' |tac |xargs); do
  		for dep in $deps; do
			if [ "x$TERM" != "xlinux" ]; then
				echo -ne "\033]0;ybs working: ${dep}\007"; ypkg_install ${dep} || exit 1
			else
		  		ypkg_install ${dep} || exit 1
		 	fi
	      	done
		
		if [ "x$TERM" != "xlinux" ]; then
			echo -ne "\033]0;ybs working: ${app}\007"; ypkg_install ${app} || exit 1
		else
			ypkg_install ${app} || exit 1
		fi
	done
	;;

-is|--install-single) 
	check_root
	#install single package
	msg_ "* Installing "
	wmsg_ "${args[@]} "
	msg "..."
	FORCE_INSTALL="yes"
	for i in ${args[@]}; do
		if [ "x$TERM" != "xlinux" ]; then
			echo -ne "\033]0;ybs working: ${i}\007"; ypkg_install $i || exit 1
		else
			ypkg_install $i || exit 1
		fi
	done
	;;

-r|--remove)
	check_root
	#remove package
	msg_ "* Removing "
	wmsg_ "${args[@]} "
	for i in ${args[@]}; do
		ypkg -C $i
	done
	;;

--sync) 
	#sync pbs libs with git.
	check_root
	logfile="/var/log/ybs.log"
	ymsg "* Sync pbslibs via git ..."
	if [ x"$(cat $logfile 2>/dev/null)" != x ];then
		echo
		mmsg "* Last update: $(date -d "1970-01-01 UTC $(cat $logfile) seconds" +%F,%T,%z)"
		echo
	fi
	mkdir -p $YPPATH
	err_check "* [Error]: Create dir $YPPATH failed."
	mkdir -p $YPPATH_LIB
	err_check "* [Error]: Create dir $YPPATH_LIB failed."
	cd $YPPATH_LIB
	err_check "* [Error]: enter dir $YPPATH_LIB failed."
	if [ -d .git ]; then
		# Already exist.
		git pull 
		git checkout develop
		date +%s >$logfile
	else
		cd ..
		# remove an system error.
		[ -d /etc ] || mkdir /etc
		[ -f /etc/hosts ] || touch /etc/hosts
		git clone git://git.ylmf.com/pbslib.git 
		git checkout develop
		date +%s >$logfile
	fi
	;;

-n|--notes)
	# show users notes
	for i in ${args[@]}; do
		ypkg_show $i notes
	done
	;;

-c|--comments)
	# show comments 
	for i in ${args[@]}; do
		ypkg_show $i comments
	done
	;;

-k|--depend)
	#show dependence
	for i in ${args[@]}; do
		ypkg_show $i depend
	done
	;;

-w|--showpbs)
	#show pbs file
	for i in ${args[@]}; do
		ypkg_show $i pbs
	done
	;;

-wr|--whatrequires)
	#show which package depends on pkg
	msg "* [R] stand for run time depend, [B] for build, [A] for recommoneded, [C] for conflict."
	for i in ${args[@]}; do
		 ypkg_whatrequires $i
	done
	;;

*|-h|--help)
	#show usage 
	ypkg_show_usage
	exit 0
	;;
esac

# End of file
