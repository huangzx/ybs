#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Author: Zhongxin Huang <zhongxin.huang@gmail.com>
#

import os
import sys
import sqlite3
import ybs.pybs
import argparse

VERSION = ybs.settings.__version__
TMPDIR = '/tmp'
SUFFIX = 'svg'


class DepMisc(object):
    ''' ybs dependency tools miscellaneous

    '''
    def __init__(self, dbfile=ybs.settings.__depend_db__,
                 dbtable=ybs.settings.__depend_db_table__, dep_type='rdep'):
        ''' initial, connect to the database

        Args:
          dbfile: string, path to dbfile, a.k.a depend.db
          dbtable: string, db table's name
          dep_type: string, dependency type, such as 'rdep', 'bdep'

        '''
        self.conn = sqlite3.connect(dbfile)
        self.cur = self.conn.cursor()
        self.dbfile = dbfile
        self.dep_type = dep_type
        self.dbtable = dbtable

    def __del__(self):
        ''' disconnect database

        '''
        self.conn.close()

    def dep_rank(self):
        ''' ranking by number of dependency required

        '''
        def get_all_deps_from_db():
            self.cur.execute("SELECT {} FROM {}".format(self.dep_type, self.dbtable))
            result = self.cur.fetchall()
            for res in result:
                yield [x.split('(')[0] for x in res[0].split()]

        dep_dict = {}
        for each_dep in get_all_deps_from_db():
            for dep in each_dep:
                if dep in dep_dict:
                    dep_dict[dep] += 1
                else:
                    dep_dict[dep] = 1

        for v, k in sorted([(value, key) for (key, value) in dep_dict.items()]):
            print(v, str(k))

    def _write_dot_file(self, dot_file, lines, name):
        ''' write dot file

        Args:
          dot_file: string, path to dot file
          linesï¼šinterator, lines to be written
          name: string, display name, nothing to with pkgname

        '''
        with open(dot_file, 'w') as file_:
            file_.write('digraph "{}" {{'.format(name) + '\n')
            for line in lines:
                file_.write(line + '\n')
            file_.write('}')
        print('Dot file is {}\nFor converting to {} picture, Run: dot -T{} {} -o {}'.format(dot_file, SUFFIX, SUFFIX, dot_file, os.path.join(TMPDIR, name+'.'+SUFFIX)))

    def _get_lines(self, deps):
        ''' get specified lines for dot file

        Args:
          deps: interator

        Returns:
          string: yiled generator

        '''
        for i in deps:
            tmp = ' '.join(['"' + x + '"' for x in ybs.pybs.get_deps_from_db(i, self.dep_type)])
            yield '{{ {} }} -> "{}"'.format(tmp, i)

    def dep_graph(self, pkg):
        ''' dependency graph of pkg, dot file

        Args:
          pkg: string, pkgname

        '''
        dot_file = os.path.join(TMPDIR, pkg+'.dot')
        self._write_dot_file(dot_file, self._get_lines(ybs.pybs.get_deps_from_db_deep(pkg, self.dep_type, self.dbfile, self.dbtable)), pkg)

    def dep_graph_universe(self):
        ''' dependency graph of database universe table, dot file

        universe table is dependency tree of pkgs in pbslib

        '''
        def _get_names_from_db():
            self.cur.execute("SELECT {} FROM {}".format('name', self.dbtable))
            result = self.cur.fetchall()
            for res in result:
                yield res[0]

        name = 'universe'
        dot_file = os.path.join(TMPDIR, name+'.dot')
        self._write_dot_file(dot_file, self._get_lines(_get_names_from_db()), name)


def main():
    argvs = sys.argv[1:]
    if not argvs:
        argvs = ['-h']

    desc = 'dependent tools miscellaneous, part of ybs.'
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('-v', '--version', action='store_true',
                        dest='v', help='show version')
    parser.add_argument('-r', '--rank', action='store_true',
                        dest='r', help='show dependency ranking and exit')
    parser.add_argument('-u', '--universe', action='store_true',
                        dest='u', help='show dependency graph of universe')
    parser.add_argument('-g', '--graph', nargs='*', metavar='pkg',
                        dest='g', help='show dependency graph of pacakge')
    args = parser.parse_args(argvs)

    if args.v:
        print(VERSION)
        sys.exit()

    depmisc = DepMisc(dep_type='rdep')

    if args.r:
        depmisc.dep_rank()
        sys.exit()

    if args.g:
        for pkg in args.g:
            depmisc.dep_graph(pkg)

    if args.u:
        depmisc.dep_graph_universe()


if __name__ == '__main__':
    main()
