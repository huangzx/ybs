#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# Copyright Â© 2013 ivali.com
# Author: Zhongxin Huang <zhongxin.huang@gmail.com>
#

import sys
import os
import ybs.utils, ybs.settings
import argparse
import subprocess

IS_VERBOSE = False
CHECK_ALL = False
CHECK_INSTALLED_ONLY = False
VERSION = ybs.settings.__version__


class CheckPbsfile(object):
    ''' check missing and circular dependency of pbsfile

    '''
    def __init__(self, infile, pbslib_map):
        '''
        Args:
          infile: string, path to pbsfile
          pbslib_map: dict, map of pbslib

        '''
        self.pbsfile = ybs.utils.PbsFile()
        self.pbsfile.parse(infile)
        self.name, self.version = self.pbsfile.name, self.pbsfile.version
        self.pbslib_map = pbslib_map

    def check_depend(self):
        ''' bundle of multi-checking

        '''
        if CHECK_INSTALLED_ONLY:
            if not ybs.utils.is_installed(self.name):
                return 
        if IS_VERBOSE:
            print('Found: {}'.format(self.pbsfile.path))
        self.check_run_depend()
        self.check_build_depend()
        self.check_recommended_depend()
        self.check_circular_depend()

    def check_circular_depend(self):
        ''' checking for circular dependency

        '''
        pkg = self.name
        cmd = 'spcct -C "pybs --get_rdeps" -c '
        p = subprocess.Popen(cmd+pkg, shell=True, stdout=subprocess.PIPE)
        # p.communicate method return a tuple looks likes:
        # (stdoutdata, stderrdata)
        stream_data = p.communicate()[0]
        #if p.returncode != 0:
        #    sys.stderr.write("{} not found in database".format(pkg))
        #    sys.exit(1)
        if stream_data:
            print(stream_data)

    def check_run_depend(self, mark='[R]'):
        ''' checking for missing run-time dependency '''
        self.do_check(self.pbsfile.get('RDEPEND'), mark)

    def check_build_depend(self, mark='[B]'):
        ''' checking for missing build-time dependency '''
        self.do_check(self.pbsfile.get('BDEPEND'), mark)

    def check_recommended_depend(self, mark='[A]'):
        ''' checking for missing recommended dependency '''
        self.do_check(self.pbsfile.get('RECOMMENDED'), mark)

    def do_check(self, depends, mark):
        '''
        Args:
          depends: list
          mark: string

        '''
        for dep in depends:
            if '(' in dep:
                dep = dep.rstrip(')')
                dep_name, dep_version_raw = dep.split('(')
                flags = ('>=', '<=', '=', '>', '<')
                for flag in flags:
                    if flag in dep_version_raw:
                        depVersion = dep_version_raw.split(flag)[1]
                        break
                if not dep_name in self.pbslib_map:
                    print('{} {} {} -> {}'.format(mark, self.name, self.version, dep_name))
                else:
                    result = 1
                    for ver in self.pbslib_map[dep_name]:
                        ret = ybs.utils.compare_version(ver, depVersion)
                        if flag == '>=':
                            if ret == '>' or ret == '=':
                                result = 0
                                break
                        if flag == '<=':
                            if ret == '<' or ret == '=':
                                result = 0
                                break
                        if flag == '=':
                            if ret == '=':
                                result = 0
                                break
                        if flag == '>':
                            if ret == '>':
                                result = 0
                                break
                        if flag == '<':
                            if ret == '<':
                                result = 0
                                break
                    if result:
                        print('{} {} {} -> {}'.format(mark, self.name, self.version, dep_name + ' ' + dep_version_raw))
            else:
                if not dep in self.pbslib_map:
                    print('{} {} {} -> {}'.format(mark, self.name, self.version, dep))


def main():
    argvs = sys.argv[1:]
    if not argvs:
        argvs = ['-h']

    desc = 'Checking for missing and circular dependecies of pbsdir or pbsfile.'
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('-V', '--version', action='store_true',
                        dest='V', help='show version and exit')
    parser.add_argument('-v', '--verbose', action='store_true',
                        dest='v', help='enable verbose mode')
    parser.add_argument('-I', '--installed', action='store_true',
                        dest='I', help='check installed package only')
    parser.add_argument('-A', '--all', action='store_true',
                        dest='A', help='check all pbsfile in directory, default is the latest version')
    parser.add_argument('path', nargs='*', help='path to pbsdir or pbsfile')
    args = parser.parse_args(argvs)

    if args.V:
        print(VERSION)
        sys.exit()

    if args.v:
        global IS_VERBOSE
        IS_VERBOSE = True
    
    if args.A:
        global CHECK_ALL
        CHECK_ALL = True
    
    if args.I:
        global CHECK_INSTALLED_ONLY
        CHECK_INSTALLED_ONLY = True

    print("Parsing pbslib from {}...".format(ybs.settings.__pbslib_path__))
    pbslib_map = ybs.utils.parse_pbslib(ybs.settings.__pbslib_path__)

    print('Checking for missing and circular dependencies...')
    print("'[R]' stands for run-time, '[B]' for build-time, '[A]' for recommended.\n")

    if args.path:
        pathes = set(args.path)
        for path in pathes:
            path = os.path.realpath(path)
            if os.path.isdir(path):
                if CHECK_ALL:
                    files = ybs.utils.files_in_dir(path, 'pbs')
                else:
                    files = ybs.utils.files_in_dir(path, 'pbs', 'version')
                if not files:
                    sys.stderr.write("No pbsfile found in directory {}.\n".format(path))
                    continue
                for file_ in files:
                    if not ybs.utils.is_pbsfile_likes(file_):
                        sys.stderr.write("{} is a invalid pbsfile.\n".format(file_))
                        continue
                    checkpbsfile = CheckPbsfile(file_, pbslib_map)
                    checkpbsfile.check_depend()
            elif os.path.isfile(path):
                    if not ybs.utils.is_pbsfile_likes(path):
                        sys.stderr.write("{} is a invalid pbsfile.\n".format(path))
                        continue
                    checkpbsfile = CheckPbsfile(path, pbslib_map)
                    checkpbsfile.check_depend()
            else:
                sys.stderr.write("{} not found.\n".format(path))


if __name__ == '__main__':
    main()
