#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# Copyright Â© 2013 ivali.com
# Author: Zhongxin Huang <zhongxin.huang@gmail.com>
#

import sys
import os
import shutil
import xml.etree.ElementTree as ET
from ybs import ybsutils
import argparse

IS_VERBOSE = False
YES_TO_ALL = False


def find_ypk(indir, arch):
    ''' find all the ypkfile in given directory.

    Args:
      indir: string, path to ypkfile directory
      arch: string, specify ypkfile arch

    Returns:
      list, contains ypkfile with newest version items

    '''
    ypks_raw = ybsutils.files_in_dir(indir, '.ypk')
    ypks_raw.sort()
    if not ypks_raw:
        sys.stdout.write("No ypkfile found in '{}'.\n".format(indir))
        sys.exit(1)

    ypks_arch = ybsutils.files_in_dir(indir, arch + '.ypk', filte='version')
    if not ypks_arch:
        sys.stdout.write("No '{}' ypkfile found in '{}'.\n".format(arch, indir))
        sys.exit(1)

    print('* ypkfile binary-dir: {}'.format(indir))
    filelist = os.path.join(indir, 'filelist.txt')
    filelist_new = ypks_raw
    if not os.path.isfile(filelist):
        filelist_old = []
    else:
        with open(filelist, 'r') as f:
            filelist_old = f.readlines()
    file_remove = []
    file_add = []
    for x in filelist_old:
        if os.path.join(indir, x.strip()) not in filelist_new:
            file_remove.append(x.strip())
    for x in filelist_new:
        if x.replace(indir + '/', '') + '\n' not in filelist_old:
            file_add.append(x.replace(indir + '/', ''))
    for x in file_remove:
        print('- {}'.format(x))
    for x in file_add:
        print('+ {}'.format(x))

    if not YES_TO_ALL:
        noes = ('n', 'no', 'nop', 'nope')
        choice = raw_input('Do you want to continue? [Y/n]').lower()
        if choice in noes:
            sys.exit()
    with open(filelist, 'w') as f:
        for line in filelist_new:
            f.write(line.replace(indir + '/', '') + '\n')

    ypks_any = ybsutils.files_in_dir(indir, 'any' + '.ypk', filte='version')
    ypks_all = ypks_arch + ypks_any
    return ypks_all


def merge_info(indir, indexdir, inlist, repo='stable'):
    ''' Merge information of ypkfile into index file

    Args:
      indir: string, path to ypkdir
      inlist: list, ypkfile string items
      repo: string, repo

    '''
    def _write_xml(tree, outpath):
        ''' write xml to file '''
        tree.write(outpath, encoding="utf-8", xml_declaration=True)
    indexdir = indexdir
    index = os.path.join(indexdir, 'update.xml')
    indexfile = open(index, 'w')
    indexfile.writelines(("<?xml version='1.0' encoding='UTF-8'?>\n",
                          '<PackageInfo>\n'))
    for ypk in inlist:
        if IS_VERBOSE:
            print('Found {}'.format(ypk))
        xml_raw = ypk.replace('.ypk', '.xml')
        if not os.path.isfile(xml_raw):
            cmd = 'tar xf ' + ypk + ' pkginfo'
            os.system(cmd)
            cmd = 'tar xf pkginfo control.xml'
            os.system(cmd)
            os.rename('control.xml', xml_raw)
            os.remove(os.path.realpath('pkginfo'))
        ypk_filelist = ypk.replace('.ypk', '.filelist')
        if not os.path.isfile(ypk_filelist):
            cmd = 'tar xf ' + ypk + ' pkginfo'
            os.system(cmd)
            cmd = 'tar xf pkginfo filelist'
            os.system(cmd)
            os.rename('filelist', ypk_filelist)
            os.remove(os.path.realpath('pkginfo'))
        tmpfile = xml_raw + '.tmp'
        tree = ET.parse(xml_raw)
        root = tree.getroot()
        # uri
        uri = ypk.replace(indir + '/', '')
        if root.find('Package/uri') is None:
            element = ET.Element('uri', {})
            element.text = uri
            root.find('Package').append(element)
        else:
            root.find('Package/uri').text = uri
        # size
        if root.find('Package/size') is None:
            fsize = str(os.path.getsize(ypk))
            element = ET.Element('size', {})
            element.text = fsize
            root.find('Package').append(element)
        else:
            pass
            #root.find('Package/size').text = fsize
        # sha1sum
        if root.find('Package/sha') is None:
            sha1sum = ybsutils.get_sha1sum(ypk)
            element = ET.Element('sha', {})
            element.text = sha1sum
            root.find('Package').append(element)
        else:
            pass
            #root.find('Package/sha').text = sha1sum
        # repo
        if root.find('Package/repo') is None:
            element = ET.Element('repo', {})
            element.text = repo
            root.find('Package').append(element)
        else:
            root.find('Package/repo').text = repo
        _write_xml(tree, tmpfile)
        os.rename(tmpfile, xml_raw)
        with open(xml_raw) as f:
            for line in f.readlines():
                strline = line.strip()
                if '<?xml' in strline or '<PackageInfo' in strline or '</PackageInfo' in strline:
                    continue
                indexfile.write(line)
    indexfile.write('</PackageInfo>')
    indexfile.close()
    os.chdir(indexdir)
    update_file = repo + '.tar.xz'
    with open('updates.list', 'a') as update_list:
        cmd = 'tar cJf' + ' ' + update_file + ' ' + 'update.xml'
        os.system(cmd)
        os.rename('update.xml', update_file.replace('tar.xz', 'xml'))
        sha1sum = ybsutils.get_sha1sum(update_file)
        update_list.write(update_file + ' ' + str(int(os.path.getmtime(update_file))) + ' ' + sha1sum + '\n')
    print('Generation complete!')


def get_repo(indir):
    '''
    Args:
      indir: string, path to directory

    Returns:
      list of paths. For example:
        ['/var/ybs/packages/stable', '/var/ybs/packages/testing']

    '''
    result = []
    file_ = os.path.join(indir, 'repos.txt')
    if os.path.isfile(file_):
        with open(file_, 'r') as f:
            for line in f:
                line = line.strip()
                if not len(line) or line.startswith('#'):
                    continue
                repo_dir = os.path.join(indir, line)
                if os.path.isdir(repo_dir):
                    result.append((repo_dir, line))
    return result


def main():
    argvs = sys.argv[1:]
    if not argvs:
        argvs = ['-h']

    desc = (
        "Sorts through a tree of 'ypk' binary packages "
        "and creates index files, used by yget."
    )
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('-V', '--version', action='store_true',
                        dest='V', help='show version')
    parser.add_argument('-v', '--verbose', action='store_true',
                        dest='v', help='enable verbose mode')
    parser.add_argument('-y', '--yes', action='store_true',
                        dest='y', help='assume yes to all queries')
    parser.add_argument('-a', '--arch', nargs=1,
                        metavar='arch', default=[ybsutils.__arch__],
                        dest='a', help='specify arch, available: i686, x86_64')
    parser.add_argument('ypkdir', nargs='*', help="path to ypkdir")
    args = parser.parse_args(argvs)

    if args.V:
        print(ybsutils.__version__)
        sys.exit()

    if args.v:
        global IS_VERBOSE
        IS_VERBOSE = True

    if args.y:
        global YES_TO_ALL
        YES_TO_ALL = True

    arch = args.a[0]

    if args.ypkdir:
        dirs = args.ypkdir
        for dir_ in dirs:
            dir_ = os.path.realpath(dir_)
            if not os.path.isdir(dir_):
                sys.stderr.write("'{}' is not a directory.\n".format(dir_))
                sys.exit(1)
            # Generate index by specified arch
            indexdir = os.path.join(dir_, 'updates' + '-' + arch)
            #indexdir = os.path.join(dir_, 'updates')
            if os.path.isdir(indexdir):
                shutil.rmtree(indexdir)
            os.mkdir(indexdir)
            repo_dir = get_repo(dir_)
            if repo_dir:
                for rd in repo_dir:
                    merge_info(dir_, indexdir, find_ypk(rd[0], arch), rd[1])
            else:
                merge_info(dir_, indexdir, find_ypk(dir_, arch))


if __name__ == "__main__":
    main()
