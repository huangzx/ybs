#!/usr/bin/env python
# -*- coding: utf8 -*-
#   ybs-scanpackages -- create Packages index files  
#
#   Copyright Â© 2012 ivali.com
#   Maintainer: Zhongxin Huang <huangzhongxin@ivali.com>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import sys
import os
import shutil
import xml.etree.ElementTree as ET
import ybsutils
import argparse

__version__ = '0.1'


def find_ypk(indir):
    '''find all the ypk in given directory.

    Args:
       indir: A string of path to directory
    
    Returns:
       A list of ypkfile with newest version
    
    '''
    ypks_raw = ybsutils.files_in_dir(indir, '.ypk')
    ypks_raw.sort()
    if not ypks_raw:
        sys.stdout.write("No ypk package found in '{}'.\n".format(indir))
        sys.exit()
    print('* YPK package binary-dir: {}'.format(indir))    	    
    filelist = os.path.join(indir, 'filelist.txt')
    filelist_new = ypks_raw
    if not os.path.isfile(filelist):
        filelist_old = []
    else:
        with open(filelist, 'r') as f:
            filelist_old = f.readlines()
    file_remove = []            
    file_add = []            
    for x in filelist_old:
        if os.path.join(indir, x.strip()) not in filelist_new:
            file_remove.append(x.strip())
    for x in filelist_new:
        if x.replace(indir + '/', '') + '\n' not in filelist_old:
            file_add.append(x.replace(indir + '/', ''))
    for x in file_remove:
        print('- {}'.format(x))
    for x in file_add:
        print('+ {}'.format(x))
    noes = ('n', 'no', 'nop', 'nope')
    choice = raw_input('Do you want to continue? [Y/n]').lower()
    if choice in noes:
        sys.exit()
    with open(filelist, 'w') as f:
        for line in filelist_new:
            f.write(line.replace(indir + '/', '') + '\n')
    ypks = ybsutils.files_in_dir(indir, '.ypk', 'version')
    return ypks


def merge_info(indir, indexdir, inlist, repo='stable'):
    ''' Merge info of ypks into index file

    Args:
      indir: A string of path to ypk package directory
      inlist: A list of ypks
      repo: A string of repo  

    ''' 
    def _write_xml(tree, outpath):
        ''' write xml to file '''
        tree.write(outpath, encoding="utf-8", xml_declaration=True)
    indexdir = indexdir
    index = os.path.join(indexdir, 'update.xml')
    indexfile = open(index, 'w')
    indexfile.writelines(("<?xml version='1.0' encoding='UTF-8'?>\n", 
                          '<PackageInfo>\n'))
    for ypk in inlist:
        print('found {}'.format(ypk))
        xml_raw = ypk.replace('.ypk', '.xml')
        if not os.path.isfile(xml_raw):
            cmd = 'tar xf ' + ypk + ' pkginfo'
            os.system(cmd)
            cmd = 'tar xf pkginfo control.xml'
            os.system(cmd)
            os.rename('control.xml', xml_raw)
            os.remove(os.path.realpath('pkginfo'))
        ypk_filelist = ypk.replace('.ypk', '.filelist')
        if not os.path.isfile(ypk_filelist):
            cmd = 'tar xf ' + ypk + ' pkginfo'
            os.system(cmd)
            cmd = 'tar xf pkginfo filelist'
            os.system(cmd)
            os.rename('filelist', ypk_filelist)
            os.remove(os.path.realpath('pkginfo'))
        tmpfile = xml_raw + '.tmp'
        tree = ET.parse(xml_raw)
        root = tree.getroot()
        # uri
        uri = ypk.replace(indir + '/', '')
        if root.find('Package/uri') is None:
            element = ET.Element('uri', {})
            element.text = uri
            root.find('Package').append(element)
        else:
            root.find('Package/uri').text = uri
        # size
        if root.find('Package/size') is None:
            fsize = str(os.path.getsize(ypk))
            element = ET.Element('size', {})
            element.text = fsize
            root.find('Package').append(element)
        else:
            pass
            #root.find('Package/size').text = fsize
        # sha1sum
        if root.find('Package/sha') is None:
            sha1sum = ybsutils.get_sha1sum(ypk)
            element = ET.Element('sha', {})
            element.text = sha1sum
            root.find('Package').append(element)
        else:
            pass
            #root.find('Package/sha').text = sha1sum
        # repo
        if root.find('Package/repo') is None:
            element = ET.Element('repo', {})
            element.text = repo
            root.find('Package').append(element)
        else:
            root.find('Package/repo').text = repo
        _write_xml(tree, tmpfile)
        os.rename(tmpfile, xml_raw)
        with open(xml_raw) as f:
            for line in f.readlines():
                strline = line.strip()
                if '<?xml' in strline or '<PackageInfo' in strline or '</PackageInfo' in strline:
                    continue
                indexfile.write(line)
    indexfile.write('</PackageInfo>')                    
    indexfile.close()     
    os.chdir(indexdir)
    update_file = repo + '.tar.xz'
    with open('updates.list', 'a') as update_list:
        cmd = 'tar cJf' + ' ' + update_file + ' ' + 'update.xml'
        os.system(cmd)
        os.rename('update.xml', update_file.replace('tar.xz', 'xml'))
        sha1sum = ybsutils.get_sha1sum(update_file)
        update_list.write(update_file + ' ' + str(int(os.path.getmtime(update_file))) \
                          + ' ' + sha1sum + '\n')


def get_repo(indir):
    '''

    Args:
      indir: A string of path to directory

    Returns:
      A list of path. For example:
      ['/var/ybs/packages/stable', '/var/ybs/packages/testing']

    '''
    result = []
    _file = os.path.join(indir, 'repos')
    if os.path.isfile(_file):
        with open(_file, 'r') as f:
            for line in f:
                line = line.strip()
                if not len(line) or line.startswith('#'):
                    continue
                repo_dir = os.path.join(indir, line)
                if os.path.isdir(repo_dir):
                    result.append((repo_dir, line))
    return result 
               

if __name__ == "__main__":
    argvs = sys.argv[1:]
    if not argvs:
        argvs = ['-h']
    desc = (
        "Sorts through a tree of 'ypk' binary packages "
	"and creates index files, used by yget."
    )
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('-v', '--version', action='store_true',
                        dest='v', help='show version')
    parser.add_argument('ypk_dir', nargs='*', help="path to ypk_dir")  
    args = parser.parse_args(argvs)
    if args.v:
        print __version__
    if args.ypk_dir:
        dirs = args.ypk_dir
        for _dir in dirs:
            _dir = os.path.realpath(_dir)
            if not os.path.isdir(_dir):
	            sys.stderr.write("'{}' is not a directory.\n".format(_dir))
	            sys.exit(1)
            indexdir = os.path.join(_dir, 'updates')
            if os.path.isdir(indexdir): shutil.rmtree(indexdir)
            os.mkdir(indexdir)
            repo_dir = get_repo(_dir)
            if repo_dir:
                for rd in repo_dir:
                    merge_info(_dir, indexdir, find_ypk(rd[0]), rd[1])
            else:
                merge_info(_dir, indexdir, find_ypk(_dir))
