#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# Copyright Â© 2013 ivali.com
# Author: Zhongxin Huang <zhongxin.huang@gmail.com>
#

import sys
import os
import ybs.utils
import ybs.settings
import ybs.pybs
import argparse
import multiprocessing

IS_VERBOSE = False
PBSLIB_MAP = {}
PROCESSES_NUM = 4
VERSION = ybs.settings.__version__


def is_match_arch(ypk):
    '''
    Args:
      ypk: string, path to ypkfile

    '''
    try:
        if IS_VERBOSE:
            print('Found: {}'.format(ypk))
        get = ybs.utils.GetNameVersion()
        get.parse(ypk)
        ypk_name = get.name
        ypk_arch = get.arch
        pbsfile = ybs.utils.PbsFile()
        pbsfile.parse(ybs.pybs.ybs_showpbs(ypk_name, PBSLIB_MAP))
        pbs_arch = ' '.join(pbsfile.get('YARCH'))
        if ypk_arch == 'any':
            if pbs_arch != 'any':
                print("{} mismatch arch, {} in pbslib.".format(ypk, pbs_arch))
        else:
            if pbs_arch == 'any':
                print("{} mismatch arch, {} in pbslib.".format(ypk, pbs_arch))
    except KeyboardInterrupt:
        raise KeyboardInterruptError()


class CheckConflict(object):
    ''' checking for conflicts in ypkdir

    '''
    def __init__(self, indir):
        '''
        Args:
          indir: string, path to ypkdir

        '''
        self.indir = indir

    def conflict_file(self):
        ''' ypkfiles contains common files

        '''
        filelists = ybs.utils.pkgs_in_dir(self.indir, '.filelist', filter_by='version')
        if not filelists:
            sys.stderr.write("filelist not found in {}, run 'ypk-scanpackages {}' then retry.\n".format(self.indir, self.indir))
            sys.exit(1)
        # [(name, [files]), (name2, [files])]
        files_list = []
        get = ybs.utils.GetNameVersion()
        print('found {} filelists'.format(len(filelists)))
        print('start at {}'.format(ybs.utils.what_time()))
        for filelist in filelists:
            if IS_VERBOSE:
                print('Found: {}'.format(filelist))
            get.parse(filelist)
            name, version = get.name, get.version
            record = []
            with open(filelist, 'r') as f:
                for line in f.readlines():
                    line = line.strip()
                    if line.startswith('F') or line.startswith('S'):
                        record.append(line.split(',')[1])
            files_list.append((name, record))

        for num, elem in enumerate(files_list):
            meta = set(elem[1])
            _range = files_list[num+1:]
            if _range:
                for elem_range in _range:
                    ret = meta & set(elem_range[1])
                    if ret:
                        meta_name = elem[0]
                        elem_range_name = elem_range[0]
                        print("{} in both {} {}".format(' '.join([x for x in ret]), meta_name, elem_range_name))
        print('finish at {}'.format(ybs.utils.what_time()))
    
    def conflict_arch(self):
        ''' muti arches string exist

        For example:
          mysql_5.5.29-i686.ypk, mysql_5.5.29-any.ypk

        '''
        ypks = ybs.utils.pkgs_in_dir(self.indir, '.ypk')
        if not ypks:
            sys.stderr.write("ypkfile not found in {}.\n".format(self.indir))
            sys.exit(1)
        print('found {} ypkfiles'.format(len(ypks)))
        print('start at {}'.format(ybs.utils.what_time()))
        pool = multiprocessing.Pool(PROCESSES_NUM)
        try:
            pool.map(is_match_arch, ypks)
            pool.close()
        except KeyboardInterrupt:
            pool.terminate()
        finally:
            pool.join()
        print('finish at {}'.format(ybs.utils.what_time()))


def main():
    argvs = sys.argv[1:]
    if not argvs:
        argvs = ['-h']

    desc = 'Checking for conflicts in ypk package directory.'
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('-v', '--version', action='store_true', dest='v', help='show version and exit')
    parser.add_argument('-V', '--verbose', action='store_true', dest='V', help='enable verbose mode')
    parser.add_argument('ypkdir', nargs='*', help='path to ypkdir directory')
    args = parser.parse_args(argvs)

    if args.v:
        print(VERSION)
        sys.exit()

    if args.V:
        global IS_VERBOSE
        IS_VERBOSE = True

    if args.ypkdir:
        global PBSLIB_MAP
        PBSLIB_MAP = ybs.utils.parse_pbslib(ybs.settings.__pbslib_path__)
        dirs = args.ypkdir

        print("Checking for conflicts ypkfiles in {}".format(' '.join(dirs)))
        for dir_ in dirs:
            dir_ = os.path.realpath(dir_)
            if os.path.isdir(dir_):
                print('\n* {}'.format(dir_))
                cc = CheckConflict(dir_)
                print('=> checking for conflicting filelist...')
                cc.conflict_file()
                print('=> checking for conflicting arch...')
                cc.conflict_arch()
            else:
                sys.stderr.write("{} is not a dirctory.".format(dir_))
                continue


if __name__ == '__main__':
    main()
