#!/usr/bin/env python
# -*- coding: utf8 -*-
#
#   Copyright Â© 2012 ivali.com
#   Maintainer: Zhongxin Huang <huangzhongxin@ivali.com>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import sys
import os
import ybsutils
import argparse

__version__ = '0.1'
PBSLIB_PATH = '/var/ybs/pbslib'


class CheckPbsfile(object):
    '''

    '''
    def __init__(self, infile):
        self.pbsfile = ybsutils.PbsFile()
        self.pbsfile.parse(infile)
        self.name, self.version = self.pbsfile.name, self.pbsfile.version + self.pbsfile.relversion

    def check_depends(self):
        self.check_rdepend()
        self.check_bdepend()
        self.check_redepend()

    def check_rdepend(self, mark='[R]'):
        self.do_check(self.pbsfile.get('RDEPEND'), mark) 

    def check_bdepend(self, mark='[B]'):
        self.do_check(self.pbsfile.get('BDEPEND'), mark) 
    
    def check_redepend(self, mark='[A]'):
        self.do_check(self.pbsfile.get('RECOMMENDED'), mark) 
    
    def do_check(self, depends, mark):
        ''' '''
        for dep in depends:
            if '(' in dep:
                dep = dep.rstrip(')')
                dep_name, dep_version_raw = dep.split('(')
                flags = ('>=', '<=', '=', '>', '<')
                for flag in flags:
                    if flag in dep_version_raw:
                        dep_version = dep_version_raw.split(flag)[1]
                        break
                if not dep_name in PBSLIB_DICT:
                    print '{} {} {} --> {}'.format(mark, self.name, 
                                                   self.version, dep_name)
                else:
                    result = 1
                    for ver in PBSLIB_DICT[dep_name]:
                        ret = ybsutils.compare_version(ver, dep_version)
                        if flag == '>=':
                            if ret == 1 or ret == 0:
                                result = 0
                                break
                        if flag == '<=':
                            if ret == -1 or ret == 0:
                                result = 0
                                break
                        if flag == '=':
                            if ret == 0: 
                                result = 0
                                break
                        if flag == '>':
                            if ret == 1: 
                                result = 0
                                break
                        if flag == '<':
                            if ret == -1: 
                                result = 0
                                break
                    if result:        
                        print '{} {} {} --> {}'.format(mark, self.name, 
                                                       self.version, 
                                                       dep_name+' '+dep_version_raw)   
            else:
                if not dep in PBSLIB_DICT:
                    print '{} {} {} --> {}'.format(mark, self.name, 
                                                   self.version, dep)

if __name__ == '__main__':
    ybsutils.signal_int()
    argvs = sys.argv[1:]
    if not argvs:
        argvs = ['-h']
    desc = 'Checking for missing dependecies of pbs_dir or pbs_file'
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('-v', '--version', action='store_true',
                        help='Show version')
    parser.add_argument('-d', '--dir', nargs=1, 
                        metavar='pbs_dir', dest='d', 
                        help='path to pbs_dir')
    parser.add_argument('-f', '--file', nargs=1,
                        metavar='pbs_file', dest='f',  
                        help='path to pbs_file')
    args = parser.parse_args(argvs)
    if args.version:
        print __version__
    print "Parsing pbslib from '{}'...\n".format(PBSLIB_PATH)
    PBSLIB_DICT = ybsutils.parse_pbslib(PBSLIB_PATH)
    if args.d:
        _dir = ' '.join(args.d)
        print "Checking for missing dependencies '{}'...".format(_dir)
        print "'[R]' stands for run-time, '[B]' for build-time, '[A]' for recommended.\n"
        if os.path.isdir(os.path.realpath(_dir)):
            for _file in ybsutils.files_in_dir(_dir, 'pbs'):
                checkpbsfile = CheckPbsfile(_file)
                checkpbsfile.check_depends()
        else:
            sys.stderr.write("'{}' is not a directory.".format(_dir))
            sys.exit(1)
    if args.f:
        _file = ' '.join(args.f)
        print "Checking for missing dependencies '{}'...".format(_file)
        print "'[R]' stands for run-time, '[B]' for build-time, '[A]' for recommended.\n"
        if os.path.isfile(os.path.realpath(_file)):
            checkpbsfile = CheckPbsfile(_file)
            checkpbsfile.check_depends()
        else:
            sys.stderr.write("'{}' is not a file.".format(_file))
            sys.exit(1) 
    
    #print 'Checking for circular Dependencies...\n'
    #-----------------------
    #systemd>dbus>filesystem>systemd
