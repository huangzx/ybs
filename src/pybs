#!/usr/bin/env python2
# -*- coding: utf8 -*-
#

import os
import sys
import ybsutils
import sqlite3
import argparse

PROCESSES_NUM = 4


def ybs_is_installed(name):
    '''

    Args:
      name: A string

    Returns:
      result: A tuple

    '''
    result = ybsutils.is_installed(name)
    if result is None:
        sys.stderr.write("'{}' not found. Be sure it is installed.\n".format(name))
        return ()
    else:
        return result


def ybs_showpbs(name, pbslib):
    '''

    Args:
     name: A string
     pbslib: A dict

    Returns:
      A string

    '''
    if not name in pbslib:
        sys.stderr.write("'{}' not found in {}.\n".format(name, ybsutils.__pbslib_path__))
        sys.exit(1)
    else:
        return ybsutils.file_in_dir(ybsutils.__pbslib_path__, name + '_' + pbslib[name][-1] + '.pbs')


def ybs_search(name, pbslib):
    '''

    '''
    import time
    name = name.lower()
    suffix_match = False
    prefix_match = False
    if name.endswith('$'):
        suffix_match = True
        name = name.rstrip('$')
    if name.startswith('^'):
        prefix_match = True
        name = name.lstrip('^')
    for pkgname in pbslib:
        pkgname_lower = pkgname.lower()
        if name in pkgname_lower:
            if suffix_match:
                if not pkgname_lower.endswith(name):
                    continue
            if prefix_match:
                if not pkgname_lower.startswith(name):
                    continue
            version = pbslib[pkgname][-1]
            info = ybsutils.is_installed(pkgname)
            flag = '[]'
            install_version = 'None'
            install_time = ''
            if info:
                install_version = info[1]
                ret = ybsutils.compare_version(str(version), str(install_version))
                if ret == 1:
                    flag = '[U]'
                if ret == -1:
                    flag = '[D]'
                if ret == 0:
                    flag = '[I]'
                install_time = info[-1]
                install_time = time.localtime(install_time)
                install_time = time.strftime("%Y-%m-%d %H:%M:%S", install_time)
            pbspath = ybs_showpbs(pkgname, pbslib)
            pbsfile = ybsutils.PbsFile()
            pbsfile.parse(pbspath)
            category = pbspath.split('/')[4]
            print('''{} {}/{}
      Installed: {} {}
      Available: {}
      Homepage: {}
      Description: {}
                  '''.format(flag, category, pkgname, install_version,
                             install_time, ', '.join(pbslib[pkgname]),
                             (' '.join(pbsfile.get('HOMEPAGE'))),
                             (' '.join(pbsfile.get('DESCRIPTION')))))


def ybs_whatrequires(dep):
    '''

    '''
    conn = sqlite3.connect(ybsutils.__depend_db__)
    cur = conn.cursor()
    cur.execute("SELECT name, version FROM universe;")
    pkgs = cur.fetchall()
    # pkgs: A list looks like [(u'lxrandr', u'1.2'), (u'lxmenu-data', u'1,3',)]
    for pkg in pkgs:
        for _type in ('rdep', '[R]'), ('bdep', '[B]'), ('redep', '[A]'), ('cdep', '[C]'):
            _type, flag = _type
            cur.execute("SELECT {} FROM universe WHERE name = '{}';".format(_type, pkg[0]))
            deps = cur.fetchone()
            # deps: A tuple looks like (u'gtk2(>=1.27) menu-cache startup-notification',)
            deps = [x.split('(')[0] for x in deps[0].split()]
            if dep in deps:
                print('{} {}'.format(flag, pkg[0]+'_'+pkg[1]))
    conn.close()


def ybs_update_db(dbfile):
    '''

    '''
    if os.path.exists(dbfile):
        os.remove(dbfile)
    ybs_init_db(dbfile)


def get_deps_from_file(infile):
    '''

    '''
    pbsfile = ybsutils.PbsFile()
    pbsfile.parse(infile)
    name, version = pbsfile.name, pbsfile.version + pbsfile.relversion
    rdep = ' '.join(pbsfile.get('RDEPEND'))
    bdep = ' '.join(pbsfile.get('BDEPEND'))
    redep = ' '.join(pbsfile.get('RECOMMENDED'))
    cdep = ' '.join(pbsfile.get('CONFLICT'))
    return (name, version, rdep, bdep, redep, cdep)


def ybs_init_db(dbfile, processes_num=PROCESSES_NUM):
    '''

    '''
    import StringIO
    import multiprocessing
    if os.path.exists(dbfile):
        return 0
    dir_ = os.path.dirname(dbfile)
    if not os.path.isdir(dir_):
        os.mkdir(dir_)
    # Write into stderr
    sys.stderr.write("Parsing dependency tree of '{}' to '{}'...\n".format(ybsutils.__pbslib_path__, dbfile))
    # Initialis sqlite db
    conn = sqlite3.connect(':memory:')
    cur = conn.cursor()
    cur.execute("CREATE TABLE IF NOT EXISTS universe (name TEXT, version TEXT, \
      rdep TEXT, bdep TEXT, redep TEXT, cdep TEXT);")
    # 多进程从大量文件读取依赖
    pool = multiprocessing.Pool(processes_num)
    files = ybsutils.files_in_dir(ybsutils.__pbslib_path__, '.pbs', 'version')
    result = pool.map(get_deps_from_file, files)
    pool.close()
    pool.join()
    if len(result) != len(files):
        sys.stderr.write('Missing datas: found {}, handled {}\n'.format(len(files), len(result)))
        sys.exit(1)
    # 执行数据库命令
    for res in result:
        cur.execute('INSERT INTO universe (name, version, rdep, bdep, redep, cdep) VALUES (?, ?, ?, ?, ?, ?)', res)
    # 将内存数据库写到文件
    str_buffer = StringIO.StringIO()
    for line in conn.iterdump():
        str_buffer.write('{}\n'.format(line))
    cur.close()
    # 写入数据库
    conn_file = sqlite3.connect(dbfile)
    cur_file = conn_file.cursor()
    cur_file.executescript(str_buffer.getvalue())
    cur_file.close()


def ybs_compare_version(s1, s2):
    '''

    '''
    v1 = ybsutils.get_name_version(s1)[1]
    v2 = ybsutils.get_name_version(s2)[1]
    return (ybsutils.compare_version(v1, v2))


def ybs_get_allrdeps(pkg):
    '''

    '''
    def _do_get(inlist):
        result = []
        for pkg in inlist:
            cur.execute("SELECT {} FROM universe WHERE name = '{}'".format('rdep', pkg))
            pkg_rdep = cur.fetchone()
            if not pkg_rdep:
                sys.stderr.write("'{}' not found in {}, run 'pybs --update_db' and retry.\n".format(pkg, ybsutils.__depend_db__))
                sys.exit(1)
            # 获得结果结构:
            # (u'ca-certificates libssh(>=0.2) openssl zlib rtmpdump',)
            pkg_rdep = [x.split('(')[0] for x in pkg_rdep[0].split()]
            #result.extend(pkg_rdep)
            for x in pkg_rdep:
                if x not in result:
                    result.append(x)
        return result
    conn = sqlite3.connect(ybsutils.__depend_db__)
    cur = conn.cursor()
    record = [pkg]
    while True:
        pre = len(record)
        for x in _do_get(record):
            if x not in record:
                record.append(x)
        if len(record) == pre:
            break
    return reversed(record)


def main():
    '''

    '''
    ybsutils.signal_int()
    argvs = sys.argv[1:]
    if not argvs:
        argvs = ['-h']
    
    parser = argparse.ArgumentParser(description='ybs (StartOS Build System) backend.')
    parser.add_argument('-v', '--version', action='store_true',
                        dest='v', help='show version')
    parser.add_argument('-s', '--search', nargs='*', metavar='pkg',
                        dest='s', help='search pbs_file in pbs_dir')
    parser.add_argument('-w', '--showpbs', nargs='*', metavar='pkg',
                        dest='w', help='show avaliable pbs_file in pbs_dir')
    parser.add_argument('-i', '--is_installed', nargs='*', metavar='pkg',
                        dest='i', help='show information of pkg installed')
    parser.add_argument('-g', '--get_rdeps', nargs='*', metavar='pkg',
                        dest='g', help='show runtime dependency tree of pkg')
    parser.add_argument('-wr', '--whatrequires', nargs='*', metavar='pkg',
                        dest='wr', help='show what require given package')
    parser.add_argument('-u', '--update_db', action='store_true',
                        dest='u', help='update dependency database')
    parser.add_argument('-cv', '--compare_version', nargs=2, metavar='ver',
                        dest='cv', help='comprare two version strings')
    args = parser.parse_args(argvs)
    
    if args.v:
        print(ybsutils.__version__)
        sys.exit()
    
    if args.u:
        ybs_update_db(ybsutils.__depend_db__)
    
    if args.cv:
        x, y = args.cv
        print(ybs_compare_version(x, y))
    
    if args.w:
        pbslib_map = ybsutils.parse_pbslib(ybsutils.__pbslib_path__)
        for i in args.w:
            print(ybs_showpbs(i, pbslib_map))
    
    if args.s:
        pbslib_map = ybsutils.parse_pbslib(ybsutils.__pbslib_path__)
        for i in args.s:
            ybs_search(i, pbslib_map)
    
    if args.i:
        for i in args.i:
            for x in ybs_is_installed(i):
                print(x),
    
    if args.g:
        ybs_init_db(ybsutils.__depend_db__)
        for i in args.g:
            for x in ybs_get_allrdeps(i):
                print(x),
    
    if args.wr:
        ybs_init_db(ybsutils.__depend_db__)
        for i in args.wr:
            print('{} is related with:\n'.format(i))
            ybs_whatrequires(i)


if __name__ == '__main__':
    main()
