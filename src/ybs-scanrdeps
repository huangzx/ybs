#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# Copyright Â© 2013 ivali.com
# Author: Zhongxin Huang <zhongxin.huang@gmail.com>
#

import os
import sys
import sqlite3
import argparse
import subprocess
from ybs import ybsutils
import time

IS_VERBOSE = False
SHOW_TIME = False


class ScanRdep(object):
    ''' calculate run-time dependency of package.

    '''
    def __init__(self):
        pass

    def _run_ypkg(self, arg, foo):
        ''' run ypkg cli

        Args:
          arg: string. args for ypkg
          foo: string. path to file

        Returns:
          list, contain string items

        '''
        while True:
            p = subprocess.Popen('ypkg'+' '+arg+' '+foo, shell=True, stdout=subprocess.PIPE)
            # p.communicate method return a tuple like this:
            # (stdoutdata, stderrdata)
            stream = p.communicate()[0]
            code = p.returncode
            if code == 5:
                sys.stderr.write('database is locked')
                time.sleep(1)
            elif code != 0:
                sys.stderr.write("'{}' is not installed".format(self.pkg))
                sys.exit(1)
            elif code == 0:
                break
        if stream:
            return [x for x in stream.split('\n')]
        else:
            return None

    def getfile(self, pkg):
        ''' get files and syslinks using 'ypkg -l'

        Args:
          pkg: string, package name

        '''
        if SHOW_TIME:
            print("{} Step1 'ypkg -l'".format(ybsutils.what_time()))

        def _is_skip(line):
            skips = ('/usr/include/', '/usr/share/info',
                     '/usr/share/locale/', '/usr/share/help/',
                     '/usr/share/gtk-doc/', '/usr/share/icons/',
                     '/usr/share/themes/', '/usr/share/man/',
                     '/usr/share/doc/')
            for skip in skips:
                if skip in line:
                    return True
            suffixes = ('pyc', 'pyo', 'txt', 'xml', 'docbook',
                        'cmake', 'desktop', 'xsl', 'entities',
                        'png', 'svg', 'svgz', 'jpg', 'xpm',
                        'gz', 'h', 'pc', 'qm', 'conf',
                        'prf', 'decTest', 'html')
            for suffix in suffixes: 
                if line.endswith('.'+suffix):     
                    return True
            return False

        self.pkg = pkg
        filelist_raw = self._run_ypkg('-l', pkg)
        filelist = []
        #print len(filelist_raw)
        for line in filelist_raw:
            line = line.strip()
            if line.startswith('F|') or line.startswith('S|'):
                if not _is_skip(line):
                    filelist.append(line.split('|')[-1].strip())
        if not filelist:
            sys.stderr.write("'{}' contains directory only.".format(pkg))
            sys.exit(1)
        self.filelist = filelist
        #print len(filelist)

    def getbin(self):
        ''' get sharedlib or executable files using 'file -b'

        '''
        if SHOW_TIME:
            print("{} Step2 'file -b'".format(ybsutils.what_time()))
        
        binfiles = []
        perls = []
        perlms = []
        pythons = []
        shells = []
        tcls = []
        for line in self.filelist:
            #file_result = os.popen('file -bi '+'"'+line+'"').readline()
            #if 'x-sharedlib' in file_result or 'x-executable' in file_result:
            file_result = os.popen('file -b '+'"'+line+'"').readline()
            if 'LSB executable' in file_result or 'LSB shared object' in file_result:
                binfiles.append(line)
                continue
            if 'Python script' in file_result:
                pythons.append(line)
                continue
            if 'Perl script' in file_result:
                perls.append(line)
                continue
            if 'shell script' in file_result:
                shells.append(line)
                continue
            if 'Perl5 module source' in file_result:
                perlms.append(line)
                continue
            if 'Tcl script' in file_result:
                tcls.append(line)
                continue
        if IS_VERBOSE:
            if perls:
                print("Perl scripts:\n{}\n".format('\n'.join(perls)))
            if pythons:
                print("Python scripts:\n{}\n".format('\n'.join(pythons)))
            if shells:
                print("Shell scripts:\n{}\n".format('\n'.join(shells)))
            if perlms:
                print("Perl5 modules:\n{}\n".format('\n'.join(perlms)))
            if tcls:
                print("Tcl scripts:\n{}\n".format('\n'.join(tcls)))
        if not binfiles:
            sys.stderr.write("'{}' does not contains sharedlib or executable files".format(self.pkg))
            sys.exit(1)
        self.binfiles = binfiles

    def getlib(self):
        ''' get library required files using 'ldd'

        '''
        if SHOW_TIME:
            print("{} Step3 'ldd'".format(ybsutils.what_time()))
        
        libfiles = []
        not_found = []
        for file_ in self.binfiles:
            ldd_result = os.popen('ldd '+file_).readlines()
            for line in ldd_result:
                line = line.strip()
                if 'not found' in line:
                    # Skip myself
                    if not [x for x in self.filelist if line.split()[0] in x]:
                        if line not in not_found:
                            not_found.append(line)
                else:
                    if '=>' in line:
                        line = line.split()[2]
                        # Get realpath
                        line = os.path.realpath(line)
                        if not line in libfiles:
                            libfiles.append(line)
        if not_found:
            sys.stderr.write('Missing requrired libs:\n')
            for x in not_found:
                print(x + '\n'),
            sys.exit(1)
        if not libfiles:
            sys.stderr.write("'{}' ldd occur failure".format(self.pkg))
            sys.exit(1)
        self.libfiles = libfiles

    def getrdep(self):
        ''' get packages required using 'ypkg -S'

        '''
        if SHOW_TIME:
            print("{} Step4 'ypkg -S'".format(ybsutils.what_time()))
        
        rdeps = []
        not_owned = []
        for file_ in self.libfiles:
            #ypkg_result = os.popen('ypkg -S --absolute '+file_).readlines()
            ypkg_result = self._run_ypkg('-S --absolute', file_)
            for line in ypkg_result:
                line = line.strip()
                # Skip blank line
                if line:
                    if 'Searching for' in line:
                        continue
                    if 'not owned by' in line:
                        if line not in not_owned:
                            not_owned.append(line)
                    # Got string like this:
                    # glibc_2.17: F, /lib64/libc-2.17.so
                    # lm_sensors_3.3.3: F, xxxxxx
                    line = line.split(':')[0]
                    line = '_'.join(line.split('_')[0:-1])
                    if not line in rdeps:
                        rdeps.append(line)
        if not_owned:
            sys.stderr.write('Files not owned by an packages:\n')
            for x in not_owned:
                print(x + '\n'),
            sys.exit(1)
        # Strip myself
        rdeps = [x for x in rdeps[:] if x != self.pkg]
        if not rdeps:
            sys.stderr.write("'{}' needs no other packages but itself".format(self.pkg))
            sys.exit()
        print('All:')
        for x in rdeps[0:-1]:
            print(x),
        print(rdeps[-1] + '\n')
        self.rdeps = rdeps

    def rdep_filted(self):
        ''' filter dependency

        '''
        if SHOW_TIME:
            print("{} Step5 filter".format(ybsutils.what_time()))
        
        pkgs = self.rdeps
        conn = sqlite3.connect(ybsutils.__depend_db__)
        cur = conn.cursor()
        # Note:
        # pkgs is to changed in loop
        for num, pkg in enumerate(pkgs[:]):
            cur.execute("SELECT {} FROM universe WHERE name = '{}'".format('rdep', pkg))
            pkg_rdeps = cur.fetchone()
            if not pkg_rdeps:
                continue
            # Got tuple like this:
            #   (u'ca-certificates libssh(>=0.2) openssl zlib rtmpdump',)
            pkg_rdeps = [x.split('(')[0] for x in pkg_rdeps[0].split()]
            # Common items
            coms = set(pkgs) & set(pkg_rdeps)
            # Strip common items from original list
            for com in coms:
                for x in pkgs:
                    if x == com:
                        pkgs.remove(com)
        print('Filtered:')
        for x in pkgs:
            print(x),
        return pkgs


def main():
    argvs = sys.argv[1:]
    if not argvs:
        argvs = ['-h']

    desc = 'Calculate run-time dependency of package.'
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('-V', '--version', action='store_true',
                        dest='V', help='show version and exit')
    parser.add_argument('-v', '--verbose', action='store_true',
                        dest='v', help='enable verbose mode')
    parser.add_argument('-t', '--time', action='store_true',
                        dest='t', help='show time spend')
    parser.add_argument('pkg', nargs='*', help='package name')
    args = parser.parse_args(argvs)

    if args.V:
        print(ybsutils.__version__)
        sys.exit()

    if args.v:
        global IS_VERBOSE
        IS_VERBOSE = True
    
    if args.t:
        global SHOW_TIME
        SHOW_TIME = True

    if args.pkg:
        for pkg in args.pkg:
            scanrdep = ScanRdep()
            scanrdep.getfile(pkg)
            scanrdep.getbin()
            scanrdep.getlib()
            scanrdep.getrdep()
            scanrdep.rdep_filted()


if __name__ == '__main__':
    main()
