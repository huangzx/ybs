#!/bin/bash
#
# ypkg -- Ylmf_OS Linux package management system 
# 
# Maintainer: Ylmf OS Developers <ylmfos@115.com>
#

#
version=0.8
[ -f /usr/lib/ybs/funcs ] && . /usr/lib/ybs/funcs
#trap clean_up INT
mkdir -p $YPPATH_PACKAGE $YPPATH_DB $YPPATH_FIELD $YPPATH_DEST

#
YPKG_ROOT="/"

#
ypkg_show_usage() {
	cat <<EOF
$0 $version 

Usage: $0 command pkg1 [pkg2 ...]

ypkg is a simple command line for install ypk package.

Commands:
       -h|--help                               show usage   
       -C|--remove                             remove package
       -i|--install  [*.${PACK_SUFFIX}]   		       install package (pkg is leafpad_0.8.17.ypk not leafpad)
       -c|--check    [*.${PACK_SUFFIX}]   		       check dependencies of package (pkg is leafpad_0.8.17.ypk not leafpad)
       -l|--list-files                         list all files of installed package
       -k|--depend                             show dependency of package
       -x|--unpack-binary [*.${PACK_SUFFIX}]   	       unpack ypk package 
       -b|--pack-directory		       pack directory to package
       -L|--list-installed                     list all installed packages
      -wr|--whatrequires                       show which package needs package
      -wp|--whatprovides [file]                search which package provide this file
      --compare-version old new                comprare two version strings 
                                               return 0 if same. 
	                                       return 1 if old is grater than new 
	                                       return 2 if old is lesser then new
EOF
}

###main

#
if [ $# -lt 2 ]; then
	ypkg_show_usage
	exit 0
fi

# 
i=0
j=0
for arg in $@; do
	case $arg in
		-*) argvs[${j}]="$arg"
		    let "j++" ;;
		*)  args[${i}]="$arg"
		    let "i++" 
	esac
done

#
case "${1}" in

-wp|--whatprovides)
	#search file belongs to package.
	msg_ "* Searching for "
	wmsg_ "${args[@]} "
	msg "..."
	for i in ${args[@]}; do
		ypkg_whatprovides $i
	done
	;;

-i|--install)
	#install ypk packages
	check_root
	for i in ${args[@]}; do
		install_pack $i
	done
	;;

-L|--list-installed)
	#list all installed packages
	ypkg_list_installed
	;;

-C|--remove)
	check_root
	for i in ${args[@]}; do
		ypkg_remove_package $i
	done
	;;

-c|--check)
	for i in ${args[@]}; do
		ypkg_check_package $i
	done
	;;

-l|--list-files)
	#list files in package.
	for i in ${args[@]}; do
		ypkg_list_package $i
	done
	;;

-x|--unpack-binary)	
	#unpack binary package
	#ensure path is exits and parse abspath
	in=$(readlink -f "$2")
	out=$(readlink -f "$3")
	if [ "x$out" = "x" ];then
		out="${in##*/}"
		out="${out%%.$PACK_SUFFIX*}"
	fi
	if [ ! -f "$in" ];then
		rmsg "* [Error]: $in not found!"
		exit 1
	fi
	if [ ! -d "$out" ];then
		if ! mkdir -p "$out" 2>/dev/null;then
			check_root
			rmsg "* [Error]: $out is not a vaild directory!"
			exit 1
		fi	
	fi
	if [ -f "$in" ] && [ -d "$out" ];then
		msg_ "* Extracting: "
		wmsg_ "$in" 
		msg_ " "
		wmsg "$out"
		ypkg_unpack_binary "$in" "$out"
	fi
	;;

-b|--pack-directory)
	#pack directory to package
	in=$(readlink -f "$2")
	if [ "x$in" != "x" ]; then
		out="${in}.$PACK_SUFFIX"
		msg_ "* Packing: "	
		wmsg_ "$in"
		msg_ " "
		wmsg "$out"
		mkpackage "$in" "$out"
	fi
	;;

--compare-version)
	#return 0 if same. 
	#return 1 if $1 is grater than $2 
	#return 2 if $1 is lesser then $2
	old=$2
	new=$3
	atom_vercmp $old $new
	case $? in
		0)   exit 0	;;
		1)   exit 1	;;
		2)   exit 2	;;
		*)   exit 3	;;
	esac
	;;

-k|--depend)
	#show dependency
	for i in ${args[@]}; do
		ypkg_showdep $i
	done
	;;

-wr|--whatrequires)
	#show which package depends on pkg
	msg "* [R] stand for run time depend, [B] for build, [A] for recommoneded, [C] for conflict."
	for i in ${args[@]}; do
		ypkg_whatrequires $i
	done
	;;

*|-h|--help)
	#show usage 
	ypkg_show_usage
	;;
esac

#end of file
